org: chnuedu
app: aws
service: serverless-lab

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1 
  environment:
    ORGANIZATIONS_TABLE: Organizations
    USERS_TABLE: Users
    ORGANIZATION_USER_QUEUE_URL:
      Ref: OrganizationUserQueue 

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Organizations"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Users"
        # Дозвіл для запитів до Global Secondary Index (GSI) OrgId-index
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Users/index/OrgId-index"
        - Effect: Allow
          Action:
            - sqs:SendMessage # Дозвіл на відправку повідомлень
          Resource:
            Fn::GetAtt: [ OrganizationUserQueue, Arn ] # ARN нашої SQS черги
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage # Дозвіл на отримання повідомлень
            - sqs:DeleteMessage # Дозвіл на видалення повідомлень після обробки
            - sqs:GetQueueAttributes # Може знадобитися для деяких операцій
          Resource:
            Fn::GetAtt: [ OrganizationUserQueue, Arn ]
plugins:
  - serverless-dynamodb 
  - serverless-offline

functions:
  createOrganization:
    handler: handler.createOrganization
    events:
      - httpApi:
          path: /organizations
          method: post

  createOrUpdateUser: # Функція для створення та оновлення користувача
    handler: handler.createOrUpdateUser
    events:
      - httpApi:
          path: /organizations/{orgId}/users
          method: post
      - httpApi:
          path: /organizations/{orgId}/users
          method: put 

  updateOrganization:
    handler: handler.updateOrganization
    events:
      - httpApi:
          path: /organizations
          method: put
  getOrganization:
    handler: handler.getOrganization
    events:
      - httpApi:
          path: /organizations/{orgId}
          method: get

  getUser:
    handler: handler.getUser
    events:
      - httpApi:
          path: /organizations/{orgId}/users/{userId}
          method: get
  getAllOrganizations: 
    handler: handler.getAllOrganizations
    events:
      - httpApi:
          path: /organizations
          method: get
  getAllUsersByOrganization:
    handler: handler.getAllUsersByOrganization
    events:
      - httpApi:
          path: /organizations/{orgId}/users
          method: get
  processSqsMessages: # Нова функція-споживач SQS
    handler: handler.processSqsMessages
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ OrganizationUserQueue, Arn ] # Посилання на ARN нашої SQS черги
          batchSize: 10 # Скільки повідомлень Lambda буде брати за один раз (до 10)
          enabled: true 


# Конфігурація DynamoDB таблиць для локального використання та розгортання
resources:
  Resources:
    OrganizationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Organizations
        AttributeDefinitions:
          - AttributeName: orgId
            AttributeType: S
        KeySchema:
          - AttributeName: orgId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST 

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: orgId 
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
    
        GlobalSecondaryIndexes:
          - IndexName: OrgId-index
            KeySchema:
              - AttributeName: orgId
                KeyType: HASH
            Projection:
              ProjectionType: ALL 
        BillingMode: PAY_PER_REQUEST 
    OrganizationUserQueue: # Назва логічного ресурсу в CloudFormation
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrganizationUserQueue-${sls:stage} # Унікальна назва черги 
        VisibilityTimeout: 300 # Таймаут видимості повідомлень у секундах
        MessageRetentionPeriod: 345600 # Час зберігання повідомлень, теж секунди. 4 дні


custom:
  serverless-offline:
    httpPort: 3000
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true # Автоматично створювати таблиці при запуску локально
    stages:
      - dev # Запускати DynamoDB Local тільки для стадії 'dev' (локальна розробка)

package: 
  individually: true 
  patterns: 
    - '!node_modules/**' 
    - '!package.json' 
    - '!README.md' 
    - '!.git/**' 
    - '!.gitignore' 
    - '!.dynamodb/**' 
    - '!.*'  
    - '!.serverless/**' 
    - 'node_modules/**' 